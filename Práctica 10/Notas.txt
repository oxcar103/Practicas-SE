Implementamos las funciones stub que necesitamos:
_open:
    - Si el dispositivo no existe, errno=ENODEV y devolvemos -1
    - Si el dispositivo existe:
        * Si el dispositivo no tiene implementación específica, se le asigna un descriptor y lo devolvemos
        * Si el dispositivo tiene implementación específica, se llama:
            ^ Si falla, la función ajusta errno y devolvemos -1
            ^ Si funciona, se le asigna un descriptor y lo devolvemos

_close:
    - Si el dispositivo no existe, errno=EBADF y devolvemos -1
    - Si el dispositivo existe:
        * Si el dispositivo no tiene implementación específica, errno=EBADF y devolvemos -1
        * Si el dispositivo tiene implementación específica, se llama:
            ^ Si falla, devolvemos su salida
            ^ Si funciona, devolvemos su salida

_read:
    - Si el dispositivo no existe, devolvemos 0
    - Si el dispositivo existe:
        * Si el dispositivo no tiene implementación específica, devolvemos 0
        * Si el dispositivo tiene implementación específica, se llama:
            ^ Si falla, devolvemos su salida
            ^ Si funciona, devolvemos su salida

_write:
    - Si el dispositivo no existe, devolvemos el total de datos a escribir
    - Si el dispositivo existe:
        * Si el dispositivo no tiene implementación específica, devolvemos el total de datos a escribir
        * Si el dispositivo tiene implementación específica, se llama:
            ^ Si falla, devolvemos su salida
            ^ Si funciona, devolvemos su salida

_lseek:
    - Si el dispositivo no existe, devolvemos 0
    - Si el dispositivo existe:
        * Si el dispositivo no tiene implementación específica, devolvemos 0
        * Si el dispositivo tiene implementación específica, se llama:
            ^ Si falla, devolvemos su salida
            ^ Si funciona, devolvemos su salida

_fstat:
    - Si el dispositivo no existe, st_mode = S_IFCHR y devolvemos 0
    - Si el dispositivo existe:
        * Si el dispositivo no tiene implementación específica, st_mode = S_IFCHR y devolvemos 0
        * Si el dispositivo tiene implementación específica, se llama:
            ^ Si falla, devolvemos su salida
            ^ Si funciona, devolvemos su salida

_isatty:
    - Si el dispositivo no existe, devolvemos 1
    - Si el dispositivo existe:
        * Si el dispositivo no tiene implementación específica, devolvemos 1
        * Si el dispositivo tiene implementación específica, se llama:
            ^ Si falla, devolvemos su salida
            ^ Si funciona, devolvemos su salida

Después de implementar todas estas funciones stub, registramos nuestro dispositivo dándole como implementaciones específicas uart_receive para read y uart_send para write, el resto se dejan a NULL.

Para comprobar el correcto funcionamiento de esta práctica, basta con sustituir todas las funciones de la capa L1 usadas en la práctica anterior por las funciones de la librería estándar de C, es decir, printf() y getchar() principalmente en nuestra práctica.

Como en esta práctica también necesitamos acceder a la UART, grabaremos el programa en la memoria flash y usaremos un programa de comunicación en serie a nuestra elección configurado con los parámetros correspondientes.
De nuevo, el resumen para ejecutar el programa es el mismo: make erase -> sudo chmod o+w /dev/ttyUSB1 -> make flash -> (resetear la placa) -> picocom -b 115200 -c /dev/ttyUSB1 -> (resetear la placa).

Nota: Me sigue pareciendo magia de qué depende el peso del fichero que se carga a la placa. Cada ejecución tiene un valor aunque no toque los ficheros fuente.
